/**
 * Shared utilities for TypeScript tests
 */

import { promises as fs } from 'fs';
import * as path from 'path';
import * as os from 'os';

export class TestContext {
  private tempDir: string | null = null;
  private keepFiles: boolean;

  constructor(keepFiles: boolean = false) {
    this.keepFiles = keepFiles;
  }

  async setup(): Promise<void> {
    this.tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'content-engine-test-'));
  }

  async cleanup(): Promise<void> {
    if (this.tempDir && !this.keepFiles) {
      await fs.rmdir(this.tempDir, { recursive: true }).catch(() => {});
    } else if (this.tempDir) {
      console.log(`Test files kept in: ${this.tempDir}`);
    }
  }

  getTempDir(): string {
    if (!this.tempDir) {
      throw new Error('TestContext not initialized. Call setup() first.');
    }
    return this.tempDir;
  }

  async createTempFile(fileName: string, content: string): Promise<string> {
    const filePath = path.join(this.getTempDir(), fileName);
    await fs.mkdir(path.dirname(filePath), { recursive: true });
    await fs.writeFile(filePath, content, 'utf-8');
    return filePath;
  }

  async createTempJson(fileName: string, data: any): Promise<string> {
    const content = JSON.stringify(data, null, 2);
    return this.createTempFile(fileName, content);
  }
}

/**
 * Mock implementations for testing without external APIs
 */

export const mockOpenAI = {
  chat: {
    completions: {
      create: jest.fn().mockResolvedValue({
        choices: [{
          message: {
            content: JSON.stringify({
              title: "Test Ocean Adventure",
              narration: "This is a test narration that contains exactly ninety to one hundred and twenty words as specified in our requirements. The content describes an underwater journey through crystal clear waters, exploring vibrant coral reefs and encountering fascinating marine life. Each word is carefully chosen to create an immersive experience that transports the viewer to the depths of the ocean, where serenity and wonder await discovery.",
              caption: "Discover the magic beneath the waves. Experience underwater serenity.",
              hashtags: [
                "#ocean", "#diving", "#underwater", "#meditation", "#nature", 
                "#peace", "#marine", "#serenity", "#adventure", "#exploration",
                "#coral", "#reef"
              ]
            })
          }
        }]
      })
    }
  }
};

export const mockGemini = {
  generateContent: jest.fn().mockResolvedValue({
    response: {
      text: () => JSON.stringify({
        title: "Test Gemini Adventure",
        narration: "This is a test narration generated by our Gemini mock implementation. It contains the appropriate number of words to satisfy our testing requirements while describing an enchanting underwater experience. The text flows naturally and captures the essence of diving adventures, from the first breath underwater to the final ascent toward the surface light.",
        caption: "Explore the depths with AI-generated wonder. Dive into serenity.",
        hashtags: [
          "#ai", "#gemini", "#ocean", "#diving", "#test", "#underwater",
          "#meditation", "#nature", "#peace", "#marine", "#serenity", "#adventure"
        ]
      })
    }
  })
};

export const mockElevenLabs = {
  textToSpeech: jest.fn().mockImplementation(async () => {
    // Return a mock audio buffer (empty for testing)
    return Buffer.alloc(44100 * 2); // 1 second of 44.1kHz 16-bit audio
  })
};

/**
 * Validation utilities
 */

export function validateNarrationResult(result: any): void {
  expect(result).toHaveProperty('title');
  expect(result).toHaveProperty('narration');
  expect(result).toHaveProperty('caption');
  expect(result).toHaveProperty('hashtags');
  
  expect(typeof result.title).toBe('string');
  expect(typeof result.narration).toBe('string');
  expect(typeof result.caption).toBe('string');
  expect(Array.isArray(result.hashtags)).toBe(true);
  
  // Validate narration length (90-120 words)
  const wordCount = result.narration.split(/\s+/).length;
  expect(wordCount).toBeGreaterThanOrEqual(90);
  expect(wordCount).toBeLessThanOrEqual(120);
  
  // Validate hashtags count
  expect(result.hashtags.length).toBeGreaterThanOrEqual(6);
  expect(result.hashtags.length).toBeLessThanOrEqual(20);
  
  // Validate hashtags format
  result.hashtags.forEach((tag: string) => {
    expect(tag).toMatch(/^#\w+/);
  });
}

export async function validateAudioFile(filePath: string): Promise<void> {
  const stats = await fs.stat(filePath);
  expect(stats.isFile()).toBe(true);
  expect(stats.size).toBeGreaterThan(0);
  
  // For more detailed validation, we could use ffprobe here
  // but keeping it simple for now
}

/**
 * Setup and teardown helpers
 */

export async function setupTestEnv(): Promise<TestContext> {
  const context = new TestContext();
  await context.setup();
  return context;
}

export async function cleanupTestEnv(context: TestContext): Promise<void> {
  await context.cleanup();
}